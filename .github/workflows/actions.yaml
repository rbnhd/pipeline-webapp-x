name: GCP CI/CD

on:
  push:
    branches:
    - main
  pull_request:

env:
  TF_VERSION: 1.8.1
  TF_WORKSPACE: terraform                                 # terraform commands will change dir each time command runs, we want to stay in root dir
  TF_VAR_project_id: ${{ secrets.PROJECT_ID }}            # Google Cloud project ID
  TF_VAR_region: ${{ vars.GCP_REGION }}                   # Prefer to set this in Github variables
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}   # Access service account key from GutHub secrets

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-22.04

    defaults:
      run:
        shell: bash

    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'
      packages: write # needed to push docker image to gcr.io
      pull-requests: write # needed to create and update comments in PRs


    steps:
    - name: Checkout
      uses: 'actions/checkout@v3'

    - id: "auth"
      name: Authenticate with Google Cloud
      uses: "google-github-actions/auth@v2"
      with:
        credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"

    - name: "Set up Cloud SDK"
      uses: "google-github-actions/setup-gcloud@v1"

    - name: "Use gcloud CLI"
      run: "gcloud info"

    - name: "Docker auth"
      run: |-
        gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev --quiet
    
    # # Uncomment this if you wish to use Workload Identity Federation for authentications instead of service account
    # - name: Setup Google Cloud Authentication 
    #   uses: 'google-github-actions/auth@v2'
    #   with:
    #     project_id: ${{ secrets.PROJECT_ID }}
    #     workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}


    - name: Build and Push Docker Images
      run: |
        docker build -t gcr.io/${{ secrets.PROJECT_ID }}/vote:latest ./src/example-voting-app/vote
        docker push gcr.io/${{ secrets.PROJECT_ID }}/vote:latest
  
      
    # - name: Setup Terraform
    #   uses: hashicorp/setup-terraform@v1
    #   with:
    #     terraform_version: ${{ env.TF_VERSION }}

    # - name: Terraform Init
    #   run: terraform -chdir=${{ env.TF_WORKSPACE }} init
     

    # - name: Terraform Validate
    #   run: terraform -chdir=${{ env.TF_WORKSPACE }} validate -no-color 

    # - name: Terraform Plan
    #   run: terraform -chdir=${{ env.TF_WORKSPACE }}  plan -no-color


    # - name: Terraform Apply
    #   run: terraform -chdir=${{ env.TF_WORKSPACE }} apply -auto-approve


    # - name: Terraform Destroy
    #   run: terraform -chdir=${{ env.TF_WORKSPACE }} destroy -auto-approve

