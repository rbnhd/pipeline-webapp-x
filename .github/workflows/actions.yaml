name: GCP CI/CD

on:
  push:
    branches:
    - main
  pull_request:

env:
  TF_VERSION: 1.8.1
  TF_WORKSPACE: terraform                                   # terraform commands will change dir each time command runs, we want to stay in root dir
  TF_VAR_region: ${{ vars.GCP_REGION }}                     # Prefer to set this in Github variables
  TF_VAR_state_bucket: ${{ secrets.GCS_BUCKET_NAME }}
  TF_VAR_project_id: ${{ secrets.PROJECT_ID }}              # Google Cloud project ID
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}     # Access service account key from GutHub secrets
  ARTIFACT_REGISTRY_URL: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.ARTIFACT_REGISTRY_REPO_NAME }} 

jobs:
  gcp_ci_cd:
    name: 'GCP CI/CD'
    runs-on: ubuntu-22.04

    defaults:
      run:
        shell: bash

    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'
      packages: write # needed to push docker image to gcr.io
      pull-requests: write # needed to create and update comments in PRs


    steps:
    - name: Checkout
      uses: 'actions/checkout@v4'

    - id: "auth"
      name: Authenticate with Google Cloud
      uses: "google-github-actions/auth@v2"
      with:
        credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
        # # Uncomment the below & comment the credentials_json; if you wish to use Workload Identity Federation for authentications instead of service account
        # project_id: ${{ secrets.PROJECT_ID }}
        # workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}



    - name: "Set up Google Cloud SDK (gcloud)"
      uses: "google-github-actions/setup-gcloud@v1"

    - name: "Authenticate to GCP Artifact Registry"
      run: |-
        gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev --quiet 
    
    # - name: Build and Push Docker Images
    #   run: |
    #     set -e
    #     services_list="vote worker result seed-data"
    #     for service in $services_list
    #     do
    #       docker build --tag ${{ env.ARTIFACT_REGISTRY_URL }}/${service}:latest ./src/example-voting-app/${service}
    #       docker push ${{ env.ARTIFACT_REGISTRY_URL }}/${service}:latest
    #     done




    # - name: Setup Terraform
    #   uses: hashicorp/setup-terraform@v1
    #   with:
    #     terraform_version: ${{ env.TF_VERSION }}

    # - name: Terraform init & validate & Plan
    #   run: |
    #     set -e
    #     terraform -chdir=${{ env.TF_WORKSPACE }} init
    #     terraform -chdir=${{ env.TF_WORKSPACE }} validate 
    #     terraform -chdir=${{ env.TF_WORKSPACE }} plan 
     

    # - name: Terraform Apply
    #   run: terraform -chdir=${{ env.TF_WORKSPACE }} apply -auto-approve





    - name: Configure Kubernetes Credentials
      run: |
        export KUBECONFIG=./kubeconfig  
        gcloud container clusters get-credentials ${{ secrets.PROJECT_ID }}-gke --zone ${{ vars.GCP_REGION }}
    
    - name: Set KUBECONFIG
      run: echo "KUBECONFIG=./kubeconfig" >> $GITHUB_ENV

    - name: Install and configure kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Replace image paths in Kubernetes manifests
      run: |
        for file in ./src/example-voting-app/k8s-specifications/*-deployment.yaml
        do
          envsubst < "$file" > "${file}.out"
          mv "${file}.out" "$file"
        done
      env:
        DOCKER_IMAGE_PATH: ${{ env.ARTIFACT_REGISTRY_URL }}

    - name: Deploy the web-app to GKE
      run: |
        cat ./src/example-voting-app/k8s-specifications/vote-deployment.yaml
        kubectl version --client
        kubectl apply -f ./src/example-voting-app/k8s-specifications/
        kubectl get nodes -o wide








    # - name: Sleep 5 minutes & Terraform Destroy
    #   if: always()
    #   run: |
    #     sleep 300
    #     terraform -chdir=${{ env.TF_WORKSPACE }} destroy -auto-approve
